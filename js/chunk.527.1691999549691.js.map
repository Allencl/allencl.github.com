{"version":3,"file":"js/chunk.527.1691999549691.js","mappings":"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","sources":["webpack://captain/./node_modules/core-js/internals/a-possible-prototype.js","webpack://captain/./node_modules/core-js/internals/array-buffer-basic-detection.js","webpack://captain/./node_modules/core-js/internals/array-buffer-view-core.js","webpack://captain/./node_modules/core-js/internals/array-from-constructor-and-list.js","webpack://captain/./node_modules/core-js/internals/array-to-reversed.js","webpack://captain/./node_modules/core-js/internals/array-with.js","webpack://captain/./node_modules/core-js/internals/classof.js","webpack://captain/./node_modules/core-js/internals/correct-prototype-getter.js","webpack://captain/./node_modules/core-js/internals/define-built-in-accessor.js","webpack://captain/./node_modules/core-js/internals/function-uncurry-this-accessor.js","webpack://captain/./node_modules/core-js/internals/is-big-int-array.js","webpack://captain/./node_modules/core-js/internals/object-get-prototype-of.js","webpack://captain/./node_modules/core-js/internals/object-set-prototype-of.js","webpack://captain/./node_modules/core-js/internals/to-big-int.js","webpack://captain/./node_modules/core-js/internals/to-string-tag-support.js","webpack://captain/./node_modules/core-js/modules/es.typed-array.to-reversed.js","webpack://captain/./node_modules/core-js/modules/es.typed-array.to-sorted.js","webpack://captain/./node_modules/core-js/modules/es.typed-array.with.js","webpack://captain/./node_modules/core-js/modules/esnext.typed-array.to-reversed.js","webpack://captain/./node_modules/core-js/modules/esnext.typed-array.to-sorted.js","webpack://captain/./node_modules/core-js/modules/esnext.typed-array.with.js","webpack://captain/./src/views/computer/index.vue","webpack://captain/./src/views/computer/moudle3.vue","webpack://captain/./node_modules/bignumber.js/bignumber.mjs","webpack://captain/./src/views/computer/moudle3.vue?9c64","webpack://captain/./src/views/computer/index.vue?7c81"],"sourcesContent":["var isCallable = require('../internals/is-callable');\n\nvar $String = String;\nvar $TypeError = TypeError;\n\nmodule.exports = function (argument) {\n  if (typeof argument == 'object' || isCallable(argument)) return argument;\n  throw $TypeError(\"Can't set \" + $String(argument) + ' as a prototype');\n};\n","// eslint-disable-next-line es/no-typed-arrays -- safe\nmodule.exports = typeof ArrayBuffer != 'undefined' && typeof DataView != 'undefined';\n","'use strict';\nvar NATIVE_ARRAY_BUFFER = require('../internals/array-buffer-basic-detection');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar global = require('../internals/global');\nvar isCallable = require('../internals/is-callable');\nvar isObject = require('../internals/is-object');\nvar hasOwn = require('../internals/has-own-property');\nvar classof = require('../internals/classof');\nvar tryToString = require('../internals/try-to-string');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar defineBuiltIn = require('../internals/define-built-in');\nvar defineBuiltInAccessor = require('../internals/define-built-in-accessor');\nvar isPrototypeOf = require('../internals/object-is-prototype-of');\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar uid = require('../internals/uid');\nvar InternalStateModule = require('../internals/internal-state');\n\nvar enforceInternalState = InternalStateModule.enforce;\nvar getInternalState = InternalStateModule.get;\nvar Int8Array = global.Int8Array;\nvar Int8ArrayPrototype = Int8Array && Int8Array.prototype;\nvar Uint8ClampedArray = global.Uint8ClampedArray;\nvar Uint8ClampedArrayPrototype = Uint8ClampedArray && Uint8ClampedArray.prototype;\nvar TypedArray = Int8Array && getPrototypeOf(Int8Array);\nvar TypedArrayPrototype = Int8ArrayPrototype && getPrototypeOf(Int8ArrayPrototype);\nvar ObjectPrototype = Object.prototype;\nvar TypeError = global.TypeError;\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar TYPED_ARRAY_TAG = uid('TYPED_ARRAY_TAG');\nvar TYPED_ARRAY_CONSTRUCTOR = 'TypedArrayConstructor';\n// Fixing native typed arrays in Opera Presto crashes the browser, see #595\nvar NATIVE_ARRAY_BUFFER_VIEWS = NATIVE_ARRAY_BUFFER && !!setPrototypeOf && classof(global.opera) !== 'Opera';\nvar TYPED_ARRAY_TAG_REQUIRED = false;\nvar NAME, Constructor, Prototype;\n\nvar TypedArrayConstructorsList = {\n  Int8Array: 1,\n  Uint8Array: 1,\n  Uint8ClampedArray: 1,\n  Int16Array: 2,\n  Uint16Array: 2,\n  Int32Array: 4,\n  Uint32Array: 4,\n  Float32Array: 4,\n  Float64Array: 8\n};\n\nvar BigIntArrayConstructorsList = {\n  BigInt64Array: 8,\n  BigUint64Array: 8\n};\n\nvar isView = function isView(it) {\n  if (!isObject(it)) return false;\n  var klass = classof(it);\n  return klass === 'DataView'\n    || hasOwn(TypedArrayConstructorsList, klass)\n    || hasOwn(BigIntArrayConstructorsList, klass);\n};\n\nvar getTypedArrayConstructor = function (it) {\n  var proto = getPrototypeOf(it);\n  if (!isObject(proto)) return;\n  var state = getInternalState(proto);\n  return (state && hasOwn(state, TYPED_ARRAY_CONSTRUCTOR)) ? state[TYPED_ARRAY_CONSTRUCTOR] : getTypedArrayConstructor(proto);\n};\n\nvar isTypedArray = function (it) {\n  if (!isObject(it)) return false;\n  var klass = classof(it);\n  return hasOwn(TypedArrayConstructorsList, klass)\n    || hasOwn(BigIntArrayConstructorsList, klass);\n};\n\nvar aTypedArray = function (it) {\n  if (isTypedArray(it)) return it;\n  throw TypeError('Target is not a typed array');\n};\n\nvar aTypedArrayConstructor = function (C) {\n  if (isCallable(C) && (!setPrototypeOf || isPrototypeOf(TypedArray, C))) return C;\n  throw TypeError(tryToString(C) + ' is not a typed array constructor');\n};\n\nvar exportTypedArrayMethod = function (KEY, property, forced, options) {\n  if (!DESCRIPTORS) return;\n  if (forced) for (var ARRAY in TypedArrayConstructorsList) {\n    var TypedArrayConstructor = global[ARRAY];\n    if (TypedArrayConstructor && hasOwn(TypedArrayConstructor.prototype, KEY)) try {\n      delete TypedArrayConstructor.prototype[KEY];\n    } catch (error) {\n      // old WebKit bug - some methods are non-configurable\n      try {\n        TypedArrayConstructor.prototype[KEY] = property;\n      } catch (error2) { /* empty */ }\n    }\n  }\n  if (!TypedArrayPrototype[KEY] || forced) {\n    defineBuiltIn(TypedArrayPrototype, KEY, forced ? property\n      : NATIVE_ARRAY_BUFFER_VIEWS && Int8ArrayPrototype[KEY] || property, options);\n  }\n};\n\nvar exportTypedArrayStaticMethod = function (KEY, property, forced) {\n  var ARRAY, TypedArrayConstructor;\n  if (!DESCRIPTORS) return;\n  if (setPrototypeOf) {\n    if (forced) for (ARRAY in TypedArrayConstructorsList) {\n      TypedArrayConstructor = global[ARRAY];\n      if (TypedArrayConstructor && hasOwn(TypedArrayConstructor, KEY)) try {\n        delete TypedArrayConstructor[KEY];\n      } catch (error) { /* empty */ }\n    }\n    if (!TypedArray[KEY] || forced) {\n      // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable\n      try {\n        return defineBuiltIn(TypedArray, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && TypedArray[KEY] || property);\n      } catch (error) { /* empty */ }\n    } else return;\n  }\n  for (ARRAY in TypedArrayConstructorsList) {\n    TypedArrayConstructor = global[ARRAY];\n    if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {\n      defineBuiltIn(TypedArrayConstructor, KEY, property);\n    }\n  }\n};\n\nfor (NAME in TypedArrayConstructorsList) {\n  Constructor = global[NAME];\n  Prototype = Constructor && Constructor.prototype;\n  if (Prototype) enforceInternalState(Prototype)[TYPED_ARRAY_CONSTRUCTOR] = Constructor;\n  else NATIVE_ARRAY_BUFFER_VIEWS = false;\n}\n\nfor (NAME in BigIntArrayConstructorsList) {\n  Constructor = global[NAME];\n  Prototype = Constructor && Constructor.prototype;\n  if (Prototype) enforceInternalState(Prototype)[TYPED_ARRAY_CONSTRUCTOR] = Constructor;\n}\n\n// WebKit bug - typed arrays constructors prototype is Object.prototype\nif (!NATIVE_ARRAY_BUFFER_VIEWS || !isCallable(TypedArray) || TypedArray === Function.prototype) {\n  // eslint-disable-next-line no-shadow -- safe\n  TypedArray = function TypedArray() {\n    throw TypeError('Incorrect invocation');\n  };\n  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {\n    if (global[NAME]) setPrototypeOf(global[NAME], TypedArray);\n  }\n}\n\nif (!NATIVE_ARRAY_BUFFER_VIEWS || !TypedArrayPrototype || TypedArrayPrototype === ObjectPrototype) {\n  TypedArrayPrototype = TypedArray.prototype;\n  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {\n    if (global[NAME]) setPrototypeOf(global[NAME].prototype, TypedArrayPrototype);\n  }\n}\n\n// WebKit bug - one more object in Uint8ClampedArray prototype chain\nif (NATIVE_ARRAY_BUFFER_VIEWS && getPrototypeOf(Uint8ClampedArrayPrototype) !== TypedArrayPrototype) {\n  setPrototypeOf(Uint8ClampedArrayPrototype, TypedArrayPrototype);\n}\n\nif (DESCRIPTORS && !hasOwn(TypedArrayPrototype, TO_STRING_TAG)) {\n  TYPED_ARRAY_TAG_REQUIRED = true;\n  defineBuiltInAccessor(TypedArrayPrototype, TO_STRING_TAG, {\n    configurable: true,\n    get: function () {\n      return isObject(this) ? this[TYPED_ARRAY_TAG] : undefined;\n    }\n  });\n  for (NAME in TypedArrayConstructorsList) if (global[NAME]) {\n    createNonEnumerableProperty(global[NAME], TYPED_ARRAY_TAG, NAME);\n  }\n}\n\nmodule.exports = {\n  NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS,\n  TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQUIRED && TYPED_ARRAY_TAG,\n  aTypedArray: aTypedArray,\n  aTypedArrayConstructor: aTypedArrayConstructor,\n  exportTypedArrayMethod: exportTypedArrayMethod,\n  exportTypedArrayStaticMethod: exportTypedArrayStaticMethod,\n  getTypedArrayConstructor: getTypedArrayConstructor,\n  isView: isView,\n  isTypedArray: isTypedArray,\n  TypedArray: TypedArray,\n  TypedArrayPrototype: TypedArrayPrototype\n};\n","var lengthOfArrayLike = require('../internals/length-of-array-like');\n\nmodule.exports = function (Constructor, list) {\n  var index = 0;\n  var length = lengthOfArrayLike(list);\n  var result = new Constructor(length);\n  while (length > index) result[index] = list[index++];\n  return result;\n};\n","var lengthOfArrayLike = require('../internals/length-of-array-like');\n\n// https://tc39.es/proposal-change-array-by-copy/#sec-array.prototype.toReversed\n// https://tc39.es/proposal-change-array-by-copy/#sec-%typedarray%.prototype.toReversed\nmodule.exports = function (O, C) {\n  var len = lengthOfArrayLike(O);\n  var A = new C(len);\n  var k = 0;\n  for (; k < len; k++) A[k] = O[len - k - 1];\n  return A;\n};\n","var lengthOfArrayLike = require('../internals/length-of-array-like');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\n\nvar $RangeError = RangeError;\n\n// https://tc39.es/proposal-change-array-by-copy/#sec-array.prototype.with\n// https://tc39.es/proposal-change-array-by-copy/#sec-%typedarray%.prototype.with\nmodule.exports = function (O, C, index, value) {\n  var len = lengthOfArrayLike(O);\n  var relativeIndex = toIntegerOrInfinity(index);\n  var actualIndex = relativeIndex < 0 ? len + relativeIndex : relativeIndex;\n  if (actualIndex >= len || actualIndex < 0) throw $RangeError('Incorrect index');\n  var A = new C(len);\n  var k = 0;\n  for (; k < len; k++) A[k] = k === actualIndex ? value : O[k];\n  return A;\n};\n","var TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');\nvar isCallable = require('../internals/is-callable');\nvar classofRaw = require('../internals/classof-raw');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar $Object = Object;\n\n// ES3 wrong here\nvar CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (error) { /* empty */ }\n};\n\n// getting tag from ES6+ `Object.prototype.toString`\nmodule.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {\n  var O, tag, result;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (tag = tryGet(O = $Object(it), TO_STRING_TAG)) == 'string' ? tag\n    // builtinTag case\n    : CORRECT_ARGUMENTS ? classofRaw(O)\n    // ES3 arguments fallback\n    : (result = classofRaw(O)) == 'Object' && isCallable(O.callee) ? 'Arguments' : result;\n};\n","var fails = require('../internals/fails');\n\nmodule.exports = !fails(function () {\n  function F() { /* empty */ }\n  F.prototype.constructor = null;\n  // eslint-disable-next-line es/no-object-getprototypeof -- required for testing\n  return Object.getPrototypeOf(new F()) !== F.prototype;\n});\n","var makeBuiltIn = require('../internals/make-built-in');\nvar defineProperty = require('../internals/object-define-property');\n\nmodule.exports = function (target, name, descriptor) {\n  if (descriptor.get) makeBuiltIn(descriptor.get, name, { getter: true });\n  if (descriptor.set) makeBuiltIn(descriptor.set, name, { setter: true });\n  return defineProperty.f(target, name, descriptor);\n};\n","var uncurryThis = require('../internals/function-uncurry-this');\nvar aCallable = require('../internals/a-callable');\n\nmodule.exports = function (object, key, method) {\n  try {\n    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\n    return uncurryThis(aCallable(Object.getOwnPropertyDescriptor(object, key)[method]));\n  } catch (error) { /* empty */ }\n};\n","var classof = require('../internals/classof');\n\nmodule.exports = function (it) {\n  var klass = classof(it);\n  return klass == 'BigInt64Array' || klass == 'BigUint64Array';\n};\n","var hasOwn = require('../internals/has-own-property');\nvar isCallable = require('../internals/is-callable');\nvar toObject = require('../internals/to-object');\nvar sharedKey = require('../internals/shared-key');\nvar CORRECT_PROTOTYPE_GETTER = require('../internals/correct-prototype-getter');\n\nvar IE_PROTO = sharedKey('IE_PROTO');\nvar $Object = Object;\nvar ObjectPrototype = $Object.prototype;\n\n// `Object.getPrototypeOf` method\n// https://tc39.es/ecma262/#sec-object.getprototypeof\n// eslint-disable-next-line es/no-object-getprototypeof -- safe\nmodule.exports = CORRECT_PROTOTYPE_GETTER ? $Object.getPrototypeOf : function (O) {\n  var object = toObject(O);\n  if (hasOwn(object, IE_PROTO)) return object[IE_PROTO];\n  var constructor = object.constructor;\n  if (isCallable(constructor) && object instanceof constructor) {\n    return constructor.prototype;\n  } return object instanceof $Object ? ObjectPrototype : null;\n};\n","/* eslint-disable no-proto -- safe */\nvar uncurryThisAccessor = require('../internals/function-uncurry-this-accessor');\nvar anObject = require('../internals/an-object');\nvar aPossiblePrototype = require('../internals/a-possible-prototype');\n\n// `Object.setPrototypeOf` method\n// https://tc39.es/ecma262/#sec-object.setprototypeof\n// Works with __proto__ only. Old v8 can't work with null proto objects.\n// eslint-disable-next-line es/no-object-setprototypeof -- safe\nmodule.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {\n  var CORRECT_SETTER = false;\n  var test = {};\n  var setter;\n  try {\n    setter = uncurryThisAccessor(Object.prototype, '__proto__', 'set');\n    setter(test, []);\n    CORRECT_SETTER = test instanceof Array;\n  } catch (error) { /* empty */ }\n  return function setPrototypeOf(O, proto) {\n    anObject(O);\n    aPossiblePrototype(proto);\n    if (CORRECT_SETTER) setter(O, proto);\n    else O.__proto__ = proto;\n    return O;\n  };\n}() : undefined);\n","var toPrimitive = require('../internals/to-primitive');\n\nvar $TypeError = TypeError;\n\n// `ToBigInt` abstract operation\n// https://tc39.es/ecma262/#sec-tobigint\nmodule.exports = function (argument) {\n  var prim = toPrimitive(argument, 'number');\n  if (typeof prim == 'number') throw $TypeError(\"Can't convert number to bigint\");\n  // eslint-disable-next-line es/no-bigint -- safe\n  return BigInt(prim);\n};\n","var wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar test = {};\n\ntest[TO_STRING_TAG] = 'z';\n\nmodule.exports = String(test) === '[object z]';\n","'use strict';\nvar arrayToReversed = require('../internals/array-to-reversed');\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\n\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\nvar getTypedArrayConstructor = ArrayBufferViewCore.getTypedArrayConstructor;\n\n// `%TypedArray%.prototype.toReversed` method\n// https://tc39.es/proposal-change-array-by-copy/#sec-%typedarray%.prototype.toReversed\nexportTypedArrayMethod('toReversed', function toReversed() {\n  return arrayToReversed(aTypedArray(this), getTypedArrayConstructor(this));\n});\n","'use strict';\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar aCallable = require('../internals/a-callable');\nvar arrayFromConstructorAndList = require('../internals/array-from-constructor-and-list');\n\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar getTypedArrayConstructor = ArrayBufferViewCore.getTypedArrayConstructor;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\nvar sort = uncurryThis(ArrayBufferViewCore.TypedArrayPrototype.sort);\n\n// `%TypedArray%.prototype.toSorted` method\n// https://tc39.es/proposal-change-array-by-copy/#sec-%typedarray%.prototype.toSorted\nexportTypedArrayMethod('toSorted', function toSorted(compareFn) {\n  if (compareFn !== undefined) aCallable(compareFn);\n  var O = aTypedArray(this);\n  var A = arrayFromConstructorAndList(getTypedArrayConstructor(O), O);\n  return sort(A, compareFn);\n});\n","'use strict';\nvar arrayWith = require('../internals/array-with');\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\nvar isBigIntArray = require('../internals/is-big-int-array');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\nvar toBigInt = require('../internals/to-big-int');\n\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar getTypedArrayConstructor = ArrayBufferViewCore.getTypedArrayConstructor;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n\nvar PROPER_ORDER = !!function () {\n  try {\n    // eslint-disable-next-line no-throw-literal, es/no-typed-arrays, es/no-array-prototype-with -- required for testing\n    new Int8Array(1)['with'](2, { valueOf: function () { throw 8; } });\n  } catch (error) {\n    // some early implementations, like WebKit, does not follow the final semantic\n    // https://github.com/tc39/proposal-change-array-by-copy/pull/86\n    return error === 8;\n  }\n}();\n\n// `%TypedArray%.prototype.with` method\n// https://tc39.es/proposal-change-array-by-copy/#sec-%typedarray%.prototype.with\nexportTypedArrayMethod('with', { 'with': function (index, value) {\n  var O = aTypedArray(this);\n  var relativeIndex = toIntegerOrInfinity(index);\n  var actualValue = isBigIntArray(O) ? toBigInt(value) : +value;\n  return arrayWith(O, getTypedArrayConstructor(O), relativeIndex, actualValue);\n} }['with'], !PROPER_ORDER);\n","// TODO: Remove from `core-js@4`\nrequire('../modules/es.typed-array.to-reversed');\n","// TODO: Remove from `core-js@4`\nrequire('../modules/es.typed-array.to-sorted');\n","// TODO: Remove from `core-js@4`\nrequire('../modules/es.typed-array.with');\n","<template>\r\n    <MoudlePage3 />\r\n\r\n\r\n</template>\r\n<script>\r\nimport MoudlePage3 from \"./moudle3.vue\"\r\n\r\n\r\n\r\nexport default {\r\n    components:{\r\n        MoudlePage3,\r\n    },\r\n    data: () => ({ \r\n\r\n    }),\r\n}\r\n</script>\r\n  \r\n\r\n  ","<template>\r\n\r\n    <v-card class=\"computer-card-1\">\r\n      <v-card-text style=\"position: relative;\">\r\n        <p class=\"text-h6 text--primary\">\r\n            <v-icon style=\"font-size: 18px;margin-bottom:4px;margin-right: 6px;\">mdi-desktop-classic</v-icon>\r\n            FXCM \r\n\r\n            <a-input-number v-model:value=\"money\" @change=\"changeMoney\" :min=\"10\" :max=\"10000\" style=\"margin-left:32px;\" />\r\n            <a-tag color=\"#55acee\" style=\"margin-left: 22px\">\r\n                <template #icon>\r\n                    <v-icon icon=\"mdi-bird\"></v-icon>\r\n                </template>\r\n                <b style=\"font-size: 12px;padding-left: 8px;\">{{ rate }}倍</b>\r\n            </a-tag>\r\n        </p>\r\n\r\n\r\n      </v-card-text>\r\n\r\n      <div style=\"padding: 0px 16px;\">\r\n\r\n        <a-table :columns=\"columns\" :data-source=\"data\" :pagination=\"false\" size=\"small\">\r\n            <template #headerCell=\"{ column }\">\r\n                <template v-if=\"column.key === 'close'\">\r\n                    <strong>{{ column.title }}</strong>\r\n                    <v-icon color=\"#FF5722\" icon=\"mdi-close-outline\"></v-icon>\r\n                </template>\r\n                <template v-if=\"column.key === 'priceStart'\">\r\n                    <strong style=\"color: #8BC34A;\">{{ column.title }}</strong>\r\n                </template>\r\n                <template v-if=\"column.key === 'priceOver'\">\r\n                    <strong style=\"color: #FF5722;\">{{ column.title }}</strong>\r\n                </template>\r\n\r\n\r\n                <template v-if=\"column.key === 'count'\">\r\n                    <strong>{{ column.title }}</strong>\r\n                    <v-icon color=\"#FFC107\" icon=\"mdi-cards\"></v-icon>\r\n                </template>\r\n\r\n                \r\n                <template v-if=\"column.key === 'number'\">\r\n                    <strong>{{ column.title }}</strong>\r\n                    <v-icon color=\"#8BC34A\" icon=\"mdi-database\"></v-icon>\r\n                </template>\r\n\r\n                <template v-if=\"column.key === 'profit'\">\r\n                    <strong>{{ column.title }}</strong>\r\n                    <v-icon color=\"#00BCD4\" icon=\"mdi-currency-usd\"></v-icon>\r\n                </template>\r\n                <template v-if=\"column.key === 'computer'\">\r\n                    <strong>{{ column.title }}</strong>\r\n                    <v-icon color=\"#00BCD4\" icon=\"mdi-desktop-classic\"></v-icon>\r\n                </template>\r\n            </template>\r\n\r\n            <template #bodyCell=\"{ column, record }\">\r\n                <template v-if=\"column.key === 'type'\">\r\n                    <b>{{ record.title }}</b>\r\n                </template>\r\n                <template v-if=\"column.key === 'priceStart' && record.type!='line'\">\r\n                    <a-input-number style=\"width:130px;\" v-model:value=\"record.valuePriceStart\" :precision=\"record._precision\" />\r\n                </template>\r\n                <template v-if=\"column.key === 'priceOver' && record.type!='line'\">\r\n                    <a-input-number style=\"width:130px;\" v-model:value=\"record.valuePriceOver\" :precision=\"record._precision\" />\r\n                </template>\r\n\r\n                <template v-if=\"column.key === 'computer'\">\r\n                    <v-btn v-if=\"record.type!='line'\" @click=\"(val)=> this.valueChange(record)\" density=\"compact\" color=\"#00BCD4\" style=\"color:#fff\" icon=\"mdi-desktop-classic\"></v-btn>\r\n                    <v-icon v-if=\"record.direction=='buy'\" color=\"#8BC34A\" icon=\"mdi-arrow-up-thin\" size=\"28\"></v-icon>\r\n                    <v-icon v-if=\"record.direction=='sell'\" color=\"#FF5722\" icon=\"mdi-arrow-down-thin\" size=\"28\"></v-icon>\r\n                </template> \r\n\r\n            </template>\r\n        </a-table>\r\n\r\n\r\n\r\n\r\n      </div>\r\n    </v-card>\r\n\r\n</template>\r\n<script>\r\nimport { defineComponent, h } from 'vue'\r\nimport BigNumber from \"bignumber.js\";\r\n\r\n\r\nexport default defineComponent({\r\n    data: (_this) => ({ \r\n\r\n        money:20,   // 止损资金\r\n        rate:7,     // 收益比例\r\n\r\n        // 配置列\r\n        columns:[\r\n            {\r\n                title: 'Type',\r\n                dataIndex: 'type',\r\n                key: 'type',\r\n                width:120\r\n            },\r\n            {\r\n                title: '开',\r\n                dataIndex: 'priceStart',\r\n                key: 'priceStart',\r\n                width:160\r\n            },\r\n            {\r\n                title: '止',\r\n                dataIndex: 'priceOver',\r\n                key: 'priceOver',\r\n                width:160\r\n            },\r\n            {\r\n                title: '点数',\r\n                dataIndex: 'count',\r\n                key: 'count',\r\n                width:130\r\n            },\r\n            {\r\n                title: '手数',\r\n                dataIndex: 'number',\r\n                key: 'number',\r\n                width:130\r\n            },\r\n            {\r\n                title: '止盈',\r\n                dataIndex: 'profit',\r\n                key: 'profit',\r\n                width:160\r\n            },\r\n\r\n            {\r\n                title: 'Computer',\r\n                dataIndex: 'computer',\r\n                key: 'computer',\r\n                width:130\r\n\r\n            },\r\n            {\r\n                title: '备注',\r\n                dataIndex: 'remark',\r\n                key: 'remark',\r\n          \r\n\r\n            },\r\n        ],\r\n\r\n        // 数据\r\n        data:[\r\n            {\r\n                type: 'NA100',    // 类型\r\n                title:\"纳斯达克100\",         // 标题\r\n                _precision:0,   //  小数位数\r\n                valuePriceStart: 15010,   // 开始价\r\n                valuePriceOver: 15000,   //  结束价\r\n                remark:\"1手 1个点 1USD\",  // 备注\r\n            },\r\n            {\r\n                type: 'SPX500',    // 类型\r\n                title:\"标普500\",         // 标题\r\n                _precision:0,   //  小数位数\r\n                valuePriceStart: 4480,   // 开始价\r\n                valuePriceOver: 4470,   //  结束价\r\n                remark:\"1手 1个点 1USD\",  // 备注\r\n            },\r\n            {\r\n                type: 'US30',    // 类型\r\n                title:\"道琼斯\",         // 标题\r\n                _precision:0,   //  小数位数\r\n                valuePriceStart: 35210,   // 开始价\r\n                valuePriceOver: 35200,   //  结束价\r\n                remark:\"1手 1个点 1USD\",  // 备注\r\n            },\r\n            {\r\n                type: 'US2000',    // 类型\r\n                title:\"罗素2000\",         // 标题\r\n                _precision:0,   //  小数位数\r\n                valuePriceStart: 1920,   // 开始价\r\n                valuePriceOver: 1910,   //  结束价\r\n                remark:\"1手 1个点 1USD\",  // 备注\r\n            },\r\n            { type:\"line\", remark:\"-\"},\r\n            {\r\n                type: 'GER40',    // 类型\r\n                title:\"德国40\",         // 标题\r\n                _precision:0,   //  小数位数\r\n                valuePriceStart: 15810,   // 开始价\r\n                valuePriceOver: 15800,   //  结束价\r\n                remark:\"1手 1个点 1USD\",  // 备注\r\n            },\r\n            {\r\n                type: 'FH40',    // 类型\r\n                title:\"法国40\",         // 标题\r\n                _precision:0,   //  小数位数\r\n                valuePriceStart: 7210,   // 开始价\r\n                valuePriceOver: 7200,   //  结束价\r\n                remark:\"1手 1个点 1USD\",  // 备注\r\n            },\r\n            {\r\n                type: 'UK100',    // 类型\r\n                title:\"英国100\",         // 标题\r\n                _precision:0,   //  小数位数\r\n                valuePriceStart: 7520,   // 开始价\r\n                valuePriceOver: 7500,   //  结束价\r\n                remark:\"1手 1个点 1USD 有偏差\",  // 备注\r\n            },\r\n            {\r\n                type: 'aus200',    // 类型\r\n                title:\"澳洲指数\",         // 标题\r\n                _precision:0,   //  小数位数\r\n                valuePriceStart: 7320,   // 开始价\r\n                valuePriceOver: 7300,   //  结束价\r\n                remark:\"1手 1个点 1USD 有偏差\",  // 备注\r\n            },\r\n            {\r\n                type: 'jp225',    // 类型\r\n                title:\"日经指数\",         // 标题\r\n                _precision:0,   //  小数位数\r\n                valuePriceStart: 31787,   // 开始价\r\n                valuePriceOver: 31930,   //  结束价\r\n                remark:\"1手 1个点 1USD 有偏差\",  // 备注\r\n            },\r\n\r\n            { type:\"line\", remark:\"-\"},\r\n            {\r\n                type: 'CH50',    // 类型\r\n                title:\"中国50\",         // 标题\r\n                _precision:0,   //  小数位数\r\n                valuePriceStart: 13120,   // 开始价\r\n                valuePriceOver: 13100,   //  结束价\r\n                remark:\"1手 1个点 1USD\",  // 备注\r\n            },\r\n            {\r\n                type: 'HK33',    // 类型\r\n                title:\"恒生指数\",         // 标题\r\n                _precision:0,   //  小数位数\r\n                valuePriceStart: 19190,   // 开始价\r\n                valuePriceOver: 19295,   //  结束价\r\n                remark:\"1手 1个点 1USD 有偏差\",  // 备注\r\n            },\r\n            { type:\"line\", remark:\"-\"},\r\n\r\n            {\r\n                type: 'XAUUSD',    // 类型\r\n                title:\"黄金\",         // 标题\r\n                _precision:0,   //  小数位数\r\n                valuePriceStart: 1950,   // 开始价\r\n                valuePriceOver: 1940,   //  结束价\r\n                remark:\"1手 1个点 1USD\",  // 备注\r\n            },\r\n            {\r\n                type: 'XAGUSD',    // 类型\r\n                title:\"白银\",         // 标题\r\n                _precision:3,   //  小数位数\r\n                valuePriceStart: 23.145,   // 开始价\r\n                valuePriceOver: 23.023,   //  结束价\r\n                remark:\"1手 0.001个点 1USD\",  // 备注\r\n            },\r\n            { type:\"line\", remark:\"-\"},\r\n            {\r\n                type: 'GBPUSD',    // 类型\r\n                title:\"英镑-美元\",         // 标题\r\n                _precision:5,   //  小数位数\r\n                valuePriceStart: 1.27181,   // 开始价\r\n                valuePriceOver: 1.26970,   //  结束价\r\n                remark:\"1手 0.00001个点 1USD\",  // 备注\r\n            },\r\n            {\r\n                type: 'EURJPY',    // 类型\r\n                title:\"欧元-日元\",         // 标题\r\n                _precision:3,   //  小数位数\r\n                valuePriceStart: 158.430,   // 开始价\r\n                valuePriceOver: 158.120,   //  结束价\r\n                remark:\"1手 0.001个点 1USD 有偏差\",  // 备注\r\n            },\r\n            {\r\n                type: 'AUDNZD',    // 类型\r\n                title:\"澳元-纽元\",         // 标题\r\n                _precision:5,   //  小数位数\r\n                valuePriceStart: 1.08530,   // 开始价\r\n                valuePriceOver: 1.08365,   //  结束价\r\n                remark:\"1手 0.00001个点 1USD\",  // 备注\r\n            },\r\n            {\r\n                type: 'CADCHF',    // 类型\r\n                title:\"加元-法郎\",         // 标题\r\n                _precision:5,   //  小数位数\r\n                valuePriceStart: 0.65178,   // 开始价\r\n                valuePriceOver: 0.65052,   //  结束价\r\n                remark:\"1手 0.00001个点 1USD\",  // 备注\r\n            },\r\n        ]\r\n\r\n\r\n    }),\r\n    created(){\r\n        const _value=localStorage.getItem(\"page_computer_money\")||10\r\n        this.money=_value\r\n    },\r\n    methods:{\r\n        // close change 111\r\n        valueChange(record){\r\n            const {money,rate}=this\r\n            const {type,valuePriceStart,valuePriceOver}=record\r\n\r\n\r\n\r\n\r\n            // 纳斯达克100   标普500  道琼斯 德国40 法国40 英国100 澳洲指数 中国50 黄金\r\n            if( [\"NA100\",\"SPX500\",\"US30\",\"US2000\", \"GER40\",\"FH40\",\"UK100\",\"aus200\",\"CH50\",\"XAUUSD\"].includes(type) ){\r\n                var _count= (new BigNumber(valuePriceStart).minus(valuePriceOver)).absoluteValue().toNumber()\r\n                var _profit=new BigNumber(_count).multipliedBy(rate).toNumber()  // 止盈\r\n                \r\n                record.number= new BigNumber(money).dividedBy(_count).toNumber().toFixed(1)   // 手数\r\n\r\n                \r\n                // 多 | 空\r\n                if(valuePriceStart>valuePriceOver){\r\n                    record.direction='buy'   \r\n                    record.profit= new BigNumber(valuePriceStart).plus(_profit).toNumber()   // 止盈\r\n                }else{\r\n                    record.direction='sell'\r\n                    record.profit= new BigNumber(valuePriceStart).minus(_profit).toNumber()  // 止盈\r\n                }\r\n                record.count=_count  // 点数\r\n            }\r\n\r\n\r\n            // 日经225\r\n            if( [\"jp225\"].includes(type) ){\r\n\r\n                var _count= (new BigNumber(valuePriceStart).minus(valuePriceOver)).absoluteValue().toNumber()\r\n                var _profit=new BigNumber(_count).multipliedBy(rate).toNumber()  // 止盈\r\n                \r\n                // record.number= new BigNumber(money).dividedBy(_count).toNumber().toFixed(1)   // 手数\r\n\r\n                \r\n                // 多 | 空\r\n                if(valuePriceStart>valuePriceOver){\r\n                    record.direction='buy'   \r\n                    record.profit= new BigNumber(valuePriceStart).plus(_profit).toNumber()   // 止盈\r\n                }else{\r\n                    record.direction='sell'\r\n                    record.profit= new BigNumber(valuePriceStart).minus(_profit).toNumber()  // 止盈\r\n                }\r\n                record.count=_count  // 点数\r\n\r\n            }\r\n\r\n\r\n            // 恒生指数\r\n            \r\n            if( [\"HK33\"].includes(type) ){\r\n\r\n                var _count= (new BigNumber(valuePriceStart).minus(valuePriceOver)).absoluteValue().toNumber()\r\n                var _profit=new BigNumber(_count).multipliedBy(rate).toNumber()  // 止盈\r\n                \r\n                record.number= new BigNumber(money).dividedBy(_count).multipliedBy(10).toNumber().toFixed(1)   // 手数\r\n\r\n\r\n                // 多 | 空\r\n                if(valuePriceStart>valuePriceOver){\r\n                    record.direction='buy'   \r\n                    record.profit= new BigNumber(valuePriceStart).plus(_profit).toNumber()   // 止盈\r\n                }else{\r\n                    record.direction='sell'\r\n                    record.profit= new BigNumber(valuePriceStart).minus(_profit).toNumber()  // 止盈\r\n                }\r\n                record.count=_count  // 点数\r\n\r\n\r\n            }\r\n\r\n            // 白银\r\n            if( [\"XAGUSD\"].includes(type) ){\r\n            \r\n            \r\n                var _count= (new BigNumber(valuePriceStart).minus(valuePriceOver)).toNumber()\r\n                var _profit=new BigNumber(_count).multipliedBy(rate).toNumber()  // 止盈\r\n                \r\n                record.number= new BigNumber(money).dividedBy(_count).toNumber().toFixed(1)   // 手数\r\n\r\n                // 多 | 空\r\n                if(valuePriceStart>valuePriceOver){\r\n                    record.direction='buy'   \r\n                    record.profit= new BigNumber(valuePriceStart).plus(_profit).toNumber()   // 止盈\r\n                }else{\r\n                    record.direction='sell'\r\n                    record.profit= new BigNumber(valuePriceStart).minus(_profit).toNumber()  // 止盈\r\n                }\r\n                record.count=_count  // 点数\r\n\r\n            \r\n            }\r\n\r\n\r\n\r\n            // 英镑美元\r\n            if( [\"GBPUSD\",\"AUDNZD\",\"CADCHF\"].includes(type) ){\r\n            \r\n            \r\n                var _count= (new BigNumber(valuePriceStart).minus(valuePriceOver)).toNumber()\r\n                var _profit=new BigNumber(_count).multipliedBy(rate).toNumber()  // 止盈\r\n                \r\n                record.number= new BigNumber(money).dividedBy(_count).dividedBy(100000).toNumber().toFixed(1)   // 手数\r\n\r\n                // 多 | 空\r\n                if(valuePriceStart>valuePriceOver){\r\n                    record.direction='buy'   \r\n                    record.profit= new BigNumber(valuePriceStart).plus(_profit).toNumber()   // 止盈\r\n                }else{\r\n                    record.direction='sell'\r\n                    record.profit= new BigNumber(valuePriceStart).minus(_profit).toNumber()  // 止盈\r\n                }\r\n                record.count=_count  // 点数\r\n\r\n            }\r\n\r\n            // 欧元日元\r\n            if( [\"EURJPY\"].includes(type) ){\r\n            \r\n            \r\n                var _count= (new BigNumber(valuePriceStart).minus(valuePriceOver)).toNumber()\r\n                var _profit=new BigNumber(_count).multipliedBy(rate).toNumber()  // 止盈\r\n                \r\n                record.number= new BigNumber(money).dividedBy(_count).dividedBy(1000).toNumber().toFixed(1)   // 手数\r\n\r\n                // 多 | 空\r\n                if(valuePriceStart>valuePriceOver){\r\n                    record.direction='buy'   \r\n                    record.profit= new BigNumber(valuePriceStart).plus(_profit).toNumber()   // 止盈\r\n                }else{\r\n                    record.direction='sell'\r\n                    record.profit= new BigNumber(valuePriceStart).minus(_profit).toNumber()  // 止盈\r\n                }\r\n                record.count=_count  // 点数\r\n\r\n            }\r\n            \r\n        },\r\n        // \r\n        changeMoney(value){\r\n            localStorage.setItem(\"page_computer_money\",value)\r\n        }\r\n    }\r\n})\r\n</script>\r\n<style>\r\n.computer-card-1{\r\n\r\n}\r\n</style>\r\n\r\n  ","/*\r\n *      bignumber.js v9.1.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\nvar\r\n  isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n  mathceil = Math.ceil,\r\n  mathfloor = Math.floor,\r\n\r\n  bignumberError = '[BigNumber Error] ',\r\n  tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n  BASE = 1e14,\r\n  LOG_BASE = 14,\r\n  MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n  SQRT_BASE = 1e7,\r\n\r\n  // EDITABLE\r\n  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n  // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n  MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n/*\r\n * Create and return a BigNumber constructor.\r\n */\r\nfunction clone(configObject) {\r\n  var div, convertBase, parseNumeric,\r\n    P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n    ONE = new BigNumber(1),\r\n\r\n\r\n    //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n    // The default values below must be integers within the inclusive ranges stated.\r\n    // The values can also be changed at run-time using BigNumber.set.\r\n\r\n    // The maximum number of decimal places for operations involving division.\r\n    DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n    // The rounding mode used when rounding to the above decimal places, and when using\r\n    // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n    // UP         0 Away from zero.\r\n    // DOWN       1 Towards zero.\r\n    // CEIL       2 Towards +Infinity.\r\n    // FLOOR      3 Towards -Infinity.\r\n    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n    // The exponent value at and beneath which toString returns exponential notation.\r\n    // Number type: -7\r\n    TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n    // The exponent value at and above which toString returns exponential notation.\r\n    // Number type: 21\r\n    TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n    // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // Number type: -324  (5e-324)\r\n    MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // Number type:  308  (1.7976931348623157e+308)\r\n    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n    MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    CRYPTO = false,                          // true or false\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN      1 The remainder has the same sign as the dividend.\r\n    //             This modulo mode is commonly known as 'truncated division' and is\r\n    //             equivalent to (a % n) in JavaScript.\r\n    // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n    //             The remainder is always positive.\r\n    //\r\n    // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n    // modes are commonly used for the modulus operation.\r\n    // Although the other rounding modes can also be used, they may not give useful results.\r\n    MODULO_MODE = 1,                         // 0 to 9\r\n\r\n    // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n    // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n    POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n    // The format specification used by the BigNumber.prototype.toFormat method.\r\n    FORMAT = {\r\n      prefix: '',\r\n      groupSize: 3,\r\n      secondaryGroupSize: 0,\r\n      groupSeparator: ',',\r\n      decimalSeparator: '.',\r\n      fractionGroupSize: 0,\r\n      fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n      suffix: ''\r\n    },\r\n\r\n    // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n    // '-', '.', whitespace, or repeated character.\r\n    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n    alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n  //------------------------------------------------------------------------------------------\r\n\r\n\r\n  // CONSTRUCTOR\r\n\r\n\r\n  /*\r\n   * The BigNumber constructor and exported function.\r\n   * Create and return a new instance of a BigNumber object.\r\n   *\r\n   * v {number|string|BigNumber} A numeric value.\r\n   * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n   */\r\n  function BigNumber(v, b) {\r\n    var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n      x = this;\r\n\r\n    // Enable constructor call without `new`.\r\n    if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n    if (b == null) {\r\n\r\n      if (v && v._isBigNumber === true) {\r\n        x.s = v.s;\r\n\r\n        if (!v.c || v.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n        } else if (v.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = v.e;\r\n          x.c = v.c.slice();\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n        // Use `1 / n` to handle minus zero also.\r\n        x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n        // Fast path for integers, where n < 2147483648 (2**31).\r\n        if (v === ~~v) {\r\n          for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n          if (e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else {\r\n            x.e = e;\r\n            x.c = [v];\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        str = String(v);\r\n      } else {\r\n\r\n        if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n        x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n      // Exponential form?\r\n      if ((i = str.search(/e/i)) > 0) {\r\n\r\n        // Determine exponent.\r\n        if (e < 0) e = i;\r\n        e += +str.slice(i + 1);\r\n        str = str.substring(0, i);\r\n      } else if (e < 0) {\r\n\r\n        // Integer.\r\n        e = str.length;\r\n      }\r\n\r\n    } else {\r\n\r\n      // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n      intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n      // Allow exponential notation to be used with base 10 argument, while\r\n      // also rounding to DECIMAL_PLACES as with other bases.\r\n      if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n        x = new BigNumber(v);\r\n        return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n      }\r\n\r\n      str = String(v);\r\n\r\n      if (isNum = typeof v == 'number') {\r\n\r\n        // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n        if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n        x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n          throw Error\r\n           (tooManyDigits + v);\r\n        }\r\n      } else {\r\n        x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      alphabet = ALPHABET.slice(0, b);\r\n      e = i = 0;\r\n\r\n      // Check that str is a valid base b number.\r\n      // Don't use RegExp, so alphabet can contain special characters.\r\n      for (len = str.length; i < len; i++) {\r\n        if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n          if (c == '.') {\r\n\r\n            // If '.' is not the first character and it has not be found before.\r\n            if (i > e) {\r\n              e = len;\r\n              continue;\r\n            }\r\n          } else if (!caseChanged) {\r\n\r\n            // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n            if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n              caseChanged = true;\r\n              i = -1;\r\n              e = 0;\r\n              continue;\r\n            }\r\n          }\r\n\r\n          return parseNumeric(x, String(v), isNum, b);\r\n        }\r\n      }\r\n\r\n      // Prevent later check for length on converted number.\r\n      isNum = false;\r\n      str = convertBase(str, b, 10, x.s);\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n      else e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n    if (str = str.slice(i, ++len)) {\r\n      len -= i;\r\n\r\n      // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n      if (isNum && BigNumber.DEBUG &&\r\n        len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n          throw Error\r\n           (tooManyDigits + (x.s * v));\r\n      }\r\n\r\n       // Overflow?\r\n      if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        x.c = x.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      } else {\r\n        x.e = e;\r\n        x.c = [];\r\n\r\n        // Transform base\r\n\r\n        // e is the base 10 exponent.\r\n        // i is where to slice str to get the first element of the coefficient array.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n        if (i < len) {\r\n          if (i) x.c.push(+str.slice(0, i));\r\n\r\n          for (len -= LOG_BASE; i < len;) {\r\n            x.c.push(+str.slice(i, i += LOG_BASE));\r\n          }\r\n\r\n          i = LOG_BASE - (str = str.slice(i)).length;\r\n        } else {\r\n          i -= len;\r\n        }\r\n\r\n        for (; i--; str += '0');\r\n        x.c.push(+str);\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    }\r\n  }\r\n\r\n\r\n  // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n  BigNumber.clone = clone;\r\n\r\n  BigNumber.ROUND_UP = 0;\r\n  BigNumber.ROUND_DOWN = 1;\r\n  BigNumber.ROUND_CEIL = 2;\r\n  BigNumber.ROUND_FLOOR = 3;\r\n  BigNumber.ROUND_HALF_UP = 4;\r\n  BigNumber.ROUND_HALF_DOWN = 5;\r\n  BigNumber.ROUND_HALF_EVEN = 6;\r\n  BigNumber.ROUND_HALF_CEIL = 7;\r\n  BigNumber.ROUND_HALF_FLOOR = 8;\r\n  BigNumber.EUCLID = 9;\r\n\r\n\r\n  /*\r\n   * Configure infrequently-changing library-wide settings.\r\n   *\r\n   * Accept an object with the following optional properties (if the value of a property is\r\n   * a number, it must be an integer within the inclusive range stated):\r\n   *\r\n   *   DECIMAL_PLACES   {number}           0 to MAX\r\n   *   ROUNDING_MODE    {number}           0 to 8\r\n   *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n   *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n   *   CRYPTO           {boolean}          true or false\r\n   *   MODULO_MODE      {number}           0 to 9\r\n   *   POW_PRECISION       {number}           0 to MAX\r\n   *   ALPHABET         {string}           A string of two or more unique characters which does\r\n   *                                       not contain '.'.\r\n   *   FORMAT           {object}           An object with some of the following properties:\r\n   *     prefix                 {string}\r\n   *     groupSize              {number}\r\n   *     secondaryGroupSize     {number}\r\n   *     groupSeparator         {string}\r\n   *     decimalSeparator       {string}\r\n   *     fractionGroupSize      {number}\r\n   *     fractionGroupSeparator {string}\r\n   *     suffix                 {string}\r\n   *\r\n   * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n   *\r\n   * E.g.\r\n   * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n   *\r\n   * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n   *\r\n   * Return an object with the properties current values.\r\n   */\r\n  BigNumber.config = BigNumber.set = function (obj) {\r\n    var p, v;\r\n\r\n    if (obj != null) {\r\n\r\n      if (typeof obj == 'object') {\r\n\r\n        // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          DECIMAL_PLACES = v;\r\n        }\r\n\r\n        // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n        // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 8, p);\r\n          ROUNDING_MODE = v;\r\n        }\r\n\r\n        // EXPONENTIAL_AT {number|number[]}\r\n        // Integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n        // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, 0, p);\r\n            intCheck(v[1], 0, MAX, p);\r\n            TO_EXP_NEG = v[0];\r\n            TO_EXP_POS = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n          }\r\n        }\r\n\r\n        // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n        // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n        if (obj.hasOwnProperty(p = 'RANGE')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, -1, p);\r\n            intCheck(v[1], 1, MAX, p);\r\n            MIN_EXP = v[0];\r\n            MAX_EXP = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            if (v) {\r\n              MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' cannot be zero: ' + v);\r\n            }\r\n          }\r\n        }\r\n\r\n        // CRYPTO {boolean} true or false.\r\n        // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n        // '[BigNumber Error] crypto unavailable'\r\n        if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n          v = obj[p];\r\n          if (v === !!v) {\r\n            if (v) {\r\n              if (typeof crypto != 'undefined' && crypto &&\r\n               (crypto.getRandomValues || crypto.randomBytes)) {\r\n                CRYPTO = v;\r\n              } else {\r\n                CRYPTO = !v;\r\n                throw Error\r\n                 (bignumberError + 'crypto unavailable');\r\n              }\r\n            } else {\r\n              CRYPTO = v;\r\n            }\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' not true or false: ' + v);\r\n          }\r\n        }\r\n\r\n        // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n        // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 9, p);\r\n          MODULO_MODE = v;\r\n        }\r\n\r\n        // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          POW_PRECISION = v;\r\n        }\r\n\r\n        // FORMAT {object}\r\n        // '[BigNumber Error] FORMAT not an object: {v}'\r\n        if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n          v = obj[p];\r\n          if (typeof v == 'object') FORMAT = v;\r\n          else throw Error\r\n           (bignumberError + p + ' not an object: ' + v);\r\n        }\r\n\r\n        // ALPHABET {string}\r\n        // '[BigNumber Error] ALPHABET invalid: {v}'\r\n        if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n          v = obj[p];\r\n\r\n          // Disallow if less than two characters,\r\n          // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n          if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n            alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n            ALPHABET = v;\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' invalid: ' + v);\r\n          }\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Object expected: {v}'\r\n        throw Error\r\n         (bignumberError + 'Object expected: ' + obj);\r\n      }\r\n    }\r\n\r\n    return {\r\n      DECIMAL_PLACES: DECIMAL_PLACES,\r\n      ROUNDING_MODE: ROUNDING_MODE,\r\n      EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n      RANGE: [MIN_EXP, MAX_EXP],\r\n      CRYPTO: CRYPTO,\r\n      MODULO_MODE: MODULO_MODE,\r\n      POW_PRECISION: POW_PRECISION,\r\n      FORMAT: FORMAT,\r\n      ALPHABET: ALPHABET\r\n    };\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if v is a BigNumber instance, otherwise return false.\r\n   *\r\n   * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n   *\r\n   * v {any}\r\n   *\r\n   * '[BigNumber Error] Invalid BigNumber: {v}'\r\n   */\r\n  BigNumber.isBigNumber = function (v) {\r\n    if (!v || v._isBigNumber !== true) return false;\r\n    if (!BigNumber.DEBUG) return true;\r\n\r\n    var i, n,\r\n      c = v.c,\r\n      e = v.e,\r\n      s = v.s;\r\n\r\n    out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n      if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n        // If the first element is zero, the BigNumber value must be zero.\r\n        if (c[0] === 0) {\r\n          if (e === 0 && c.length === 1) return true;\r\n          break out;\r\n        }\r\n\r\n        // Calculate number of digits that c[0] should have, based on the exponent.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (i < 1) i += LOG_BASE;\r\n\r\n        // Calculate number of digits of c[0].\r\n        //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n        if (String(c[0]).length == i) {\r\n\r\n          for (i = 0; i < c.length; i++) {\r\n            n = c[i];\r\n            if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n          }\r\n\r\n          // Last element cannot be zero, unless it is the only element.\r\n          if (n !== 0) return true;\r\n        }\r\n      }\r\n\r\n    // Infinity/NaN\r\n    } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n      return true;\r\n    }\r\n\r\n    throw Error\r\n      (bignumberError + 'Invalid BigNumber: ' + v);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.maximum = BigNumber.max = function () {\r\n    return maxOrMin(arguments, P.lt);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.minimum = BigNumber.min = function () {\r\n    return maxOrMin(arguments, P.gt);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n   * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n   * zeros are produced).\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n   * '[BigNumber Error] crypto unavailable'\r\n   */\r\n  BigNumber.random = (function () {\r\n    var pow2_53 = 0x20000000000000;\r\n\r\n    // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n    // Check if Math.random() produces more than 32 bits of randomness.\r\n    // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n    // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n    var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n     ? function () { return mathfloor(Math.random() * pow2_53); }\r\n     : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n       (Math.random() * 0x800000 | 0); };\r\n\r\n    return function (dp) {\r\n      var a, b, e, k, v,\r\n        i = 0,\r\n        c = [],\r\n        rand = new BigNumber(ONE);\r\n\r\n      if (dp == null) dp = DECIMAL_PLACES;\r\n      else intCheck(dp, 0, MAX);\r\n\r\n      k = mathceil(dp / LOG_BASE);\r\n\r\n      if (CRYPTO) {\r\n\r\n        // Browsers supporting crypto.getRandomValues.\r\n        if (crypto.getRandomValues) {\r\n\r\n          a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n          for (; i < k;) {\r\n\r\n            // 53 bits:\r\n            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n            //                                     11111 11111111 11111111\r\n            // 0x20000 is 2^21.\r\n            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n            // Rejection sampling:\r\n            // 0 <= v < 9007199254740992\r\n            // Probability that v >= 9e15, is\r\n            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n            if (v >= 9e15) {\r\n              b = crypto.getRandomValues(new Uint32Array(2));\r\n              a[i] = b[0];\r\n              a[i + 1] = b[1];\r\n            } else {\r\n\r\n              // 0 <= v <= 8999999999999999\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 2;\r\n            }\r\n          }\r\n          i = k / 2;\r\n\r\n        // Node.js supporting crypto.randomBytes.\r\n        } else if (crypto.randomBytes) {\r\n\r\n          // buffer\r\n          a = crypto.randomBytes(k *= 7);\r\n\r\n          for (; i < k;) {\r\n\r\n            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n            // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n            // 0 <= v < 9007199254740992\r\n            v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n               (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n               (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n            if (v >= 9e15) {\r\n              crypto.randomBytes(7).copy(a, i);\r\n            } else {\r\n\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 7;\r\n            }\r\n          }\r\n          i = k / 7;\r\n        } else {\r\n          CRYPTO = false;\r\n          throw Error\r\n           (bignumberError + 'crypto unavailable');\r\n        }\r\n      }\r\n\r\n      // Use Math.random.\r\n      if (!CRYPTO) {\r\n\r\n        for (; i < k;) {\r\n          v = random53bitInt();\r\n          if (v < 9e15) c[i++] = v % 1e14;\r\n        }\r\n      }\r\n\r\n      k = c[--i];\r\n      dp %= LOG_BASE;\r\n\r\n      // Convert trailing digits to zeros according to dp.\r\n      if (k && dp) {\r\n        v = POWS_TEN[LOG_BASE - dp];\r\n        c[i] = mathfloor(k / v) * v;\r\n      }\r\n\r\n      // Remove trailing elements which are zero.\r\n      for (; c[i] === 0; c.pop(), i--);\r\n\r\n      // Zero?\r\n      if (i < 0) {\r\n        c = [e = 0];\r\n      } else {\r\n\r\n        // Remove leading elements which are zero and adjust exponent accordingly.\r\n        for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n        // Count the digits of the first element of c to determine leading zeros, and...\r\n        for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n        // adjust the exponent accordingly.\r\n        if (i < LOG_BASE) e -= LOG_BASE - i;\r\n      }\r\n\r\n      rand.e = e;\r\n      rand.c = c;\r\n      return rand;\r\n    };\r\n  })();\r\n\r\n\r\n   /*\r\n   * Return a BigNumber whose value is the sum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.sum = function () {\r\n    var i = 1,\r\n      args = arguments,\r\n      sum = new BigNumber(args[0]);\r\n    for (; i < args.length;) sum = sum.plus(args[i++]);\r\n    return sum;\r\n  };\r\n\r\n\r\n  // PRIVATE FUNCTIONS\r\n\r\n\r\n  // Called by BigNumber and BigNumber.prototype.toString.\r\n  convertBase = (function () {\r\n    var decimal = '0123456789';\r\n\r\n    /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n     * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n     */\r\n    function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n      var j,\r\n        arr = [0],\r\n        arrL,\r\n        i = 0,\r\n        len = str.length;\r\n\r\n      for (; i < len;) {\r\n        for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n        arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n        for (j = 0; j < arr.length; j++) {\r\n\r\n          if (arr[j] > baseOut - 1) {\r\n            if (arr[j + 1] == null) arr[j + 1] = 0;\r\n            arr[j + 1] += arr[j] / baseOut | 0;\r\n            arr[j] %= baseOut;\r\n          }\r\n        }\r\n      }\r\n\r\n      return arr.reverse();\r\n    }\r\n\r\n    // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n    // If the caller is toString, we are converting from base 10 to baseOut.\r\n    // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n    return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n      var alphabet, d, e, k, r, x, xc, y,\r\n        i = str.indexOf('.'),\r\n        dp = DECIMAL_PLACES,\r\n        rm = ROUNDING_MODE;\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        k = POW_PRECISION;\r\n\r\n        // Unlimited precision.\r\n        POW_PRECISION = 0;\r\n        str = str.replace('.', '');\r\n        y = new BigNumber(baseIn);\r\n        x = y.pow(str.length - i);\r\n        POW_PRECISION = k;\r\n\r\n        // Convert str as if an integer, then restore the fraction part by dividing the\r\n        // result by its base raised to a power.\r\n\r\n        y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n         10, baseOut, decimal);\r\n        y.e = y.c.length;\r\n      }\r\n\r\n      // Convert the number as integer.\r\n\r\n      xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n       ? (alphabet = ALPHABET, decimal)\r\n       : (alphabet = decimal, ALPHABET));\r\n\r\n      // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n      e = k = xc.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xc[--k] == 0; xc.pop());\r\n\r\n      // Zero?\r\n      if (!xc[0]) return alphabet.charAt(0);\r\n\r\n      // Does str represent an integer? If so, no need for the division.\r\n      if (i < 0) {\r\n        --e;\r\n      } else {\r\n        x.c = xc;\r\n        x.e = e;\r\n\r\n        // The sign is needed for correct rounding.\r\n        x.s = sign;\r\n        x = div(x, y, dp, rm, baseOut);\r\n        xc = x.c;\r\n        r = x.r;\r\n        e = x.e;\r\n      }\r\n\r\n      // xc now represents str converted to baseOut.\r\n\r\n      // THe index of the rounding digit.\r\n      d = e + dp + 1;\r\n\r\n      // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n      i = xc[d];\r\n\r\n      // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n      k = baseOut / 2;\r\n      r = r || d < 0 || xc[d + 1] != null;\r\n\r\n      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n            : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n      // If the index of the rounding digit is not greater than zero, or xc represents\r\n      // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n      // such as 0.00001.\r\n      if (d < 1 || !xc[0]) {\r\n\r\n        // 1^-dp or 0\r\n        str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n      } else {\r\n\r\n        // Truncate xc to the required number of decimal places.\r\n        xc.length = d;\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (--baseOut; ++xc[--d] > baseOut;) {\r\n            xc[d] = 0;\r\n\r\n            if (!d) {\r\n              ++e;\r\n              xc = [1].concat(xc);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (k = xc.length; !xc[--k];);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n        // Add leading zeros, decimal point and trailing zeros as required.\r\n        str = toFixedPoint(str, e, alphabet.charAt(0));\r\n      }\r\n\r\n      // The caller will add the sign.\r\n      return str;\r\n    };\r\n  })();\r\n\r\n\r\n  // Perform division in the specified base. Called by div and convertBase.\r\n  div = (function () {\r\n\r\n    // Assume non-zero x and k.\r\n    function multiply(x, k, base) {\r\n      var m, temp, xlo, xhi,\r\n        carry = 0,\r\n        i = x.length,\r\n        klo = k % SQRT_BASE,\r\n        khi = k / SQRT_BASE | 0;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        xlo = x[i] % SQRT_BASE;\r\n        xhi = x[i] / SQRT_BASE | 0;\r\n        m = khi * xlo + xhi * klo;\r\n        temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n        carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n        x[i] = temp % base;\r\n      }\r\n\r\n      if (carry) x = [carry].concat(x);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, cmp;\r\n\r\n      if (aL != bL) {\r\n        cmp = aL > bL ? 1 : -1;\r\n      } else {\r\n\r\n        for (i = cmp = 0; i < aL; i++) {\r\n\r\n          if (a[i] != b[i]) {\r\n            cmp = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return cmp;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n    }\r\n\r\n    // x: dividend, y: divisor.\r\n    return function (x, y, dp, rm, base) {\r\n      var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n        yL, yz,\r\n        s = x.s == y.s ? 1 : -1,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n        return new BigNumber(\r\n\r\n         // Return NaN if either NaN, or both Infinity or 0.\r\n         !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n          xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n       );\r\n      }\r\n\r\n      q = new BigNumber(s);\r\n      qc = q.c = [];\r\n      e = x.e - y.e;\r\n      s = dp + e + 1;\r\n\r\n      if (!base) {\r\n        base = BASE;\r\n        e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n        s = s / LOG_BASE | 0;\r\n      }\r\n\r\n      // Result exponent may be one less then the current value of e.\r\n      // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n      for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n      if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n      if (s < 0) {\r\n        qc.push(1);\r\n        more = true;\r\n      } else {\r\n        xL = xc.length;\r\n        yL = yc.length;\r\n        i = 0;\r\n        s += 2;\r\n\r\n        // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n        n = mathfloor(base / (yc[0] + 1));\r\n\r\n        // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n        // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n        if (n > 1) {\r\n          yc = multiply(yc, n, base);\r\n          xc = multiply(xc, n, base);\r\n          yL = yc.length;\r\n          xL = xc.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xc.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL; rem[remL++] = 0);\r\n        yz = yc.slice();\r\n        yz = [0].concat(yz);\r\n        yc0 = yc[0];\r\n        if (yc[1] >= base / 2) yc0++;\r\n        // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n        // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n        do {\r\n          n = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yc, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, n.\r\n\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // n is how many times the divisor goes into the current remainder.\r\n            n = mathfloor(rem0 / yc0);\r\n\r\n            //  Algorithm:\r\n            //  product = divisor multiplied by trial digit (n).\r\n            //  Compare product and remainder.\r\n            //  If product is greater than remainder:\r\n            //    Subtract divisor from product, decrement trial digit.\r\n            //  Subtract product from remainder.\r\n            //  If product was less than remainder at the last compare:\r\n            //    Compare new remainder and divisor.\r\n            //    If remainder is greater than divisor:\r\n            //      Subtract divisor from remainder, increment trial digit.\r\n\r\n            if (n > 1) {\r\n\r\n              // n may be > base only when base is 3.\r\n              if (n >= base) n = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiply(yc, n, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              // If product > remainder then trial digit n too high.\r\n              // n is 1 too high about 5% of the time, and is not known to have\r\n              // ever been more than 1 too high.\r\n              while (compare(prod, rem, prodL, remL) == 1) {\r\n                n--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                prodL = prod.length;\r\n                cmp = 1;\r\n              }\r\n            } else {\r\n\r\n              // n is 0 or 1, cmp is -1.\r\n              // If n is 0, there is no need to compare yc and rem again below,\r\n              // so change cmp to 1 to avoid it.\r\n              // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n              if (n == 0) {\r\n\r\n                // divisor < remainder, so n must be at least 1.\r\n                cmp = n = 1;\r\n              }\r\n\r\n              // product = divisor\r\n              prod = yc.slice();\r\n              prodL = prod.length;\r\n            }\r\n\r\n            if (prodL < remL) prod = [0].concat(prod);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n            remL = rem.length;\r\n\r\n             // If product was < remainder.\r\n            if (cmp == -1) {\r\n\r\n              // Compare divisor and new remainder.\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              // Trial digit n too low.\r\n              // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n              while (compare(yc, rem, yL, remL) < 1) {\r\n                n++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                remL = rem.length;\r\n              }\r\n            }\r\n          } else if (cmp === 0) {\r\n            n++;\r\n            rem = [0];\r\n          } // else cmp === 1 and n will be 0\r\n\r\n          // Add the next digit, n, to the result array.\r\n          qc[i++] = n;\r\n\r\n          // Update the remainder.\r\n          if (rem[0]) {\r\n            rem[remL++] = xc[xi] || 0;\r\n          } else {\r\n            rem = [xc[xi]];\r\n            remL = 1;\r\n          }\r\n        } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n        more = rem[0] != null;\r\n\r\n        // Leading zero?\r\n        if (!qc[0]) qc.splice(0, 1);\r\n      }\r\n\r\n      if (base == BASE) {\r\n\r\n        // To calculate q.e, first get the number of digits of qc[0].\r\n        for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n        round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n      // Caller is convertBase.\r\n      } else {\r\n        q.e = e;\r\n        q.r = +more;\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n   * notation rounded to the specified decimal places or significant digits.\r\n   *\r\n   * n: a BigNumber.\r\n   * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n   * rm: the rounding mode.\r\n   * id: 1 (toExponential) or 2 (toPrecision).\r\n   */\r\n  function format(n, i, rm, id) {\r\n    var c0, e, ne, len, str;\r\n\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n\r\n    if (!n.c) return n.toString();\r\n\r\n    c0 = n.c[0];\r\n    ne = n.e;\r\n\r\n    if (i == null) {\r\n      str = coeffToString(n.c);\r\n      str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n       ? toExponential(str, ne)\r\n       : toFixedPoint(str, ne, '0');\r\n    } else {\r\n      n = round(new BigNumber(n), i, rm);\r\n\r\n      // n.e may have changed if the value was rounded up.\r\n      e = n.e;\r\n\r\n      str = coeffToString(n.c);\r\n      len = str.length;\r\n\r\n      // toPrecision returns exponential notation if the number of significant digits\r\n      // specified is less than the number of digits necessary to represent the integer\r\n      // part of the value in fixed-point notation.\r\n\r\n      // Exponential notation.\r\n      if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n        // Append zeros?\r\n        for (; len < i; str += '0', len++);\r\n        str = toExponential(str, e);\r\n\r\n      // Fixed-point notation.\r\n      } else {\r\n        i -= ne;\r\n        str = toFixedPoint(str, e, '0');\r\n\r\n        // Append zeros?\r\n        if (e + 1 > len) {\r\n          if (--i > 0) for (str += '.'; i--; str += '0');\r\n        } else {\r\n          i += e - len;\r\n          if (i > 0) {\r\n            if (e + 1 == len) str += '.';\r\n            for (; i--; str += '0');\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return n.s < 0 && c0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Handle BigNumber.max and BigNumber.min.\r\n  function maxOrMin(args, method) {\r\n    var n,\r\n      i = 1,\r\n      m = new BigNumber(args[0]);\r\n\r\n    for (; i < args.length; i++) {\r\n      n = new BigNumber(args[i]);\r\n\r\n      // If any number is NaN, return NaN.\r\n      if (!n.s) {\r\n        m = n;\r\n        break;\r\n      } else if (method.call(m, n)) {\r\n        m = n;\r\n      }\r\n    }\r\n\r\n    return m;\r\n  }\r\n\r\n\r\n  /*\r\n   * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n   * Called by minus, plus and times.\r\n   */\r\n  function normalise(n, c, e) {\r\n    var i = 1,\r\n      j = c.length;\r\n\r\n     // Remove trailing zeros.\r\n    for (; !c[--j]; c.pop());\r\n\r\n    // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n    for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n    // Overflow?\r\n    if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n      // Infinity.\r\n      n.c = n.e = null;\r\n\r\n    // Underflow?\r\n    } else if (e < MIN_EXP) {\r\n\r\n      // Zero.\r\n      n.c = [n.e = 0];\r\n    } else {\r\n      n.e = e;\r\n      n.c = c;\r\n    }\r\n\r\n    return n;\r\n  }\r\n\r\n\r\n  // Handle values that fail the validity test in BigNumber.\r\n  parseNumeric = (function () {\r\n    var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n      dotAfter = /^([^.]+)\\.$/,\r\n      dotBefore = /^\\.([^.]+)$/,\r\n      isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n      whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n    return function (x, str, isNum, b) {\r\n      var base,\r\n        s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n      // No exception on ±Infinity or NaN.\r\n      if (isInfinityOrNaN.test(s)) {\r\n        x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n      } else {\r\n        if (!isNum) {\r\n\r\n          // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n          s = s.replace(basePrefix, function (m, p1, p2) {\r\n            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n            return !b || b == base ? p1 : m;\r\n          });\r\n\r\n          if (b) {\r\n            base = b;\r\n\r\n            // E.g. '1.' to '1', '.1' to '0.1'\r\n            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n          }\r\n\r\n          if (str != s) return new BigNumber(s, base);\r\n        }\r\n\r\n        // '[BigNumber Error] Not a number: {n}'\r\n        // '[BigNumber Error] Not a base {b} number: {n}'\r\n        if (BigNumber.DEBUG) {\r\n          throw Error\r\n            (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n        }\r\n\r\n        // NaN\r\n        x.s = null;\r\n      }\r\n\r\n      x.c = x.e = null;\r\n    }\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n   * If r is truthy, it is known that there are more digits after the rounding digit.\r\n   */\r\n  function round(x, sd, rm, r) {\r\n    var d, i, j, k, n, ni, rd,\r\n      xc = x.c,\r\n      pows10 = POWS_TEN;\r\n\r\n    // if x is not Infinity or NaN...\r\n    if (xc) {\r\n\r\n      // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n      // ni is the index of n within x.c.\r\n      // d is the number of digits of n.\r\n      // i is the index of rd within n including leading zeros.\r\n      // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n      out: {\r\n\r\n        // Get the number of digits of the first element of xc.\r\n        for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n        i = sd - d;\r\n\r\n        // If the rounding digit is in the first element of xc...\r\n        if (i < 0) {\r\n          i += LOG_BASE;\r\n          j = sd;\r\n          n = xc[ni = 0];\r\n\r\n          // Get the rounding digit at index j of n.\r\n          rd = n / pows10[d - j - 1] % 10 | 0;\r\n        } else {\r\n          ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n          if (ni >= xc.length) {\r\n\r\n            if (r) {\r\n\r\n              // Needed by sqrt.\r\n              for (; xc.length <= ni; xc.push(0));\r\n              n = rd = 0;\r\n              d = 1;\r\n              i %= LOG_BASE;\r\n              j = i - LOG_BASE + 1;\r\n            } else {\r\n              break out;\r\n            }\r\n          } else {\r\n            n = k = xc[ni];\r\n\r\n            // Get the number of digits of n.\r\n            for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n            // Get the index of rd within n.\r\n            i %= LOG_BASE;\r\n\r\n            // Get the index of rd within n, adjusted for leading zeros.\r\n            // The number of leading zeros of n is given by LOG_BASE - d.\r\n            j = i - LOG_BASE + d;\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n          }\r\n        }\r\n\r\n        r = r || sd < 0 ||\r\n\r\n        // Are there any non-zero digits after the rounding digit?\r\n        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n         xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n        r = rm < 4\r\n         ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n         : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n           rm == (x.s < 0 ? 8 : 7));\r\n\r\n        if (sd < 1 || !xc[0]) {\r\n          xc.length = 0;\r\n\r\n          if (r) {\r\n\r\n            // Convert sd to decimal places.\r\n            sd -= x.e + 1;\r\n\r\n            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n            x.e = -sd || 0;\r\n          } else {\r\n\r\n            // Zero.\r\n            xc[0] = x.e = 0;\r\n          }\r\n\r\n          return x;\r\n        }\r\n\r\n        // Remove excess digits.\r\n        if (i == 0) {\r\n          xc.length = ni;\r\n          k = 1;\r\n          ni--;\r\n        } else {\r\n          xc.length = ni + 1;\r\n          k = pows10[LOG_BASE - i];\r\n\r\n          // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n          // j > 0 means i > number of leading zeros of n.\r\n          xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n        }\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          for (; ;) {\r\n\r\n            // If the digit to be rounded up is in the first element of xc...\r\n            if (ni == 0) {\r\n\r\n              // i will be the length of xc[0] before k is added.\r\n              for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n              j = xc[0] += k;\r\n              for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n              // if i != k the length has increased.\r\n              if (i != k) {\r\n                x.e++;\r\n                if (xc[0] == BASE) xc[0] = 1;\r\n              }\r\n\r\n              break;\r\n            } else {\r\n              xc[ni] += k;\r\n              if (xc[ni] != BASE) break;\r\n              xc[ni--] = 0;\r\n              k = 1;\r\n            }\r\n          }\r\n        }\r\n\r\n        // Remove trailing zeros.\r\n        for (i = xc.length; xc[--i] === 0; xc.pop());\r\n      }\r\n\r\n      // Overflow? Infinity.\r\n      if (x.e > MAX_EXP) {\r\n        x.c = x.e = null;\r\n\r\n      // Underflow? Zero.\r\n      } else if (x.e < MIN_EXP) {\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function valueOf(n) {\r\n    var str,\r\n      e = n.e;\r\n\r\n    if (e === null) return n.toString();\r\n\r\n    str = coeffToString(n.c);\r\n\r\n    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n      ? toExponential(str, e)\r\n      : toFixedPoint(str, e, '0');\r\n\r\n    return n.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new BigNumber(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   *   0 if they have the same value,\r\n   *   or null if the value of either is NaN.\r\n   */\r\n  P.comparedTo = function (y, b) {\r\n    return compare(this, new BigNumber(y, b));\r\n  };\r\n\r\n\r\n  /*\r\n   * If dp is undefined or null or true or false, return the number of decimal places of the\r\n   * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   *\r\n   * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.decimalPlaces = P.dp = function (dp, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), dp + x.e + 1, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last number.\r\n    if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n    if (n < 0) n = 0;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n   * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.dividedBy = P.div = function (y, b) {\r\n    return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n   * BigNumber by the value of BigNumber(y, b).\r\n   */\r\n  P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n    return div(this, new BigNumber(y, b), 0, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n   *\r\n   * If m is present, return the result modulo m.\r\n   * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n   *\r\n   * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n   * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n   *\r\n   * n {number|string|BigNumber} The exponent. An integer.\r\n   * [m] {number|string|BigNumber} The modulus.\r\n   *\r\n   * '[BigNumber Error] Exponent not an integer: {n}'\r\n   */\r\n  P.exponentiatedBy = P.pow = function (n, m) {\r\n    var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n      x = this;\r\n\r\n    n = new BigNumber(n);\r\n\r\n    // Allow NaN and ±Infinity, but not other non-integers.\r\n    if (n.c && !n.isInteger()) {\r\n      throw Error\r\n        (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n    }\r\n\r\n    if (m != null) m = new BigNumber(m);\r\n\r\n    // Exponent of MAX_SAFE_INTEGER is 15.\r\n    nIsBig = n.e > 14;\r\n\r\n    // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n    if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n      // The sign of the result of pow when x is negative depends on the evenness of n.\r\n      // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n      y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));\r\n      return m ? y.mod(m) : y;\r\n    }\r\n\r\n    nIsNeg = n.s < 0;\r\n\r\n    if (m) {\r\n\r\n      // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n      if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n      isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n      if (isModExp) x = x.mod(m);\r\n\r\n    // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n    // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n    } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n      // [1, 240000000]\r\n      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n      // [80000000000000]  [99999750000000]\r\n      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n      // If x is negative and n is odd, k = -0, else k = 0.\r\n      k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n      // If x >= 1, k = ±Infinity.\r\n      if (x.e > -1) k = 1 / k;\r\n\r\n      // If n is negative return ±0, else return ±Infinity.\r\n      return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n    } else if (POW_PRECISION) {\r\n\r\n      // Truncating each coefficient array to a length of k after each multiplication\r\n      // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n      // i.e. there will be a minimum of 28 guard digits retained.\r\n      k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n    }\r\n\r\n    if (nIsBig) {\r\n      half = new BigNumber(0.5);\r\n      if (nIsNeg) n.s = 1;\r\n      nIsOdd = isOdd(n);\r\n    } else {\r\n      i = Math.abs(+valueOf(n));\r\n      nIsOdd = i % 2;\r\n    }\r\n\r\n    y = new BigNumber(ONE);\r\n\r\n    // Performs 54 loop iterations for n of 9007199254740991.\r\n    for (; ;) {\r\n\r\n      if (nIsOdd) {\r\n        y = y.times(x);\r\n        if (!y.c) break;\r\n\r\n        if (k) {\r\n          if (y.c.length > k) y.c.length = k;\r\n        } else if (isModExp) {\r\n          y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (i) {\r\n        i = mathfloor(i / 2);\r\n        if (i === 0) break;\r\n        nIsOdd = i % 2;\r\n      } else {\r\n        n = n.times(half);\r\n        round(n, n.e + 1, 1);\r\n\r\n        if (n.e > 14) {\r\n          nIsOdd = isOdd(n);\r\n        } else {\r\n          i = +valueOf(n);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        }\r\n      }\r\n\r\n      x = x.times(x);\r\n\r\n      if (k) {\r\n        if (x.c && x.c.length > k) x.c.length = k;\r\n      } else if (isModExp) {\r\n        x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n      }\r\n    }\r\n\r\n    if (isModExp) return y;\r\n    if (nIsNeg) y = ONE.div(y);\r\n\r\n    return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n   * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n   */\r\n  P.integerValue = function (rm) {\r\n    var n = new BigNumber(this);\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n    return round(n, n.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isEqualTo = P.eq = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.c;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isGreaterThan = P.gt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n   */\r\n  P.isInteger = function () {\r\n    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isLessThan = P.lt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is negative, otherwise return false.\r\n   */\r\n  P.isNegative = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is positive, otherwise return false.\r\n   */\r\n  P.isPositive = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.c && this.c[0] == 0;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.minus = function (y, b) {\r\n    var i, j, t, xLTy,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Either Infinity?\r\n      if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n      // Either zero?\r\n      if (!xc[0] || !yc[0]) {\r\n\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n         // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n         ROUNDING_MODE == 3 ? -0 : 0);\r\n      }\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Determine which is the bigger number.\r\n    if (a = xe - ye) {\r\n\r\n      if (xLTy = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      for (b = a; b--; t.push(0));\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n\r\n        if (xc[b] != yc[b]) {\r\n          xLTy = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n    b = (j = yc.length) - (i = xc.length);\r\n\r\n    // Append zeros to xc if shorter.\r\n    // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n    if (b > 0) for (; b--; xc[i++] = 0);\r\n    b = BASE - 1;\r\n\r\n    // Subtract yc from xc.\r\n    for (; j > a;) {\r\n\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i]; xc[i] = b);\r\n        --xc[i];\r\n        xc[j] += BASE;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n    // Zero?\r\n    if (!xc[0]) {\r\n\r\n      // Following IEEE 754 (2008) 6.3,\r\n      // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n      y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n    // for finite x and y.\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n   * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n   */\r\n  P.modulo = P.mod = function (y, b) {\r\n    var q, s,\r\n      x = this;\r\n\r\n    y = new BigNumber(y, b);\r\n\r\n    // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n    if (!x.c || !y.s || y.c && !y.c[0]) {\r\n      return new BigNumber(NaN);\r\n\r\n    // Return x if y is Infinity or x is zero.\r\n    } else if (!y.c || x.c && !x.c[0]) {\r\n      return new BigNumber(x);\r\n    }\r\n\r\n    if (MODULO_MODE == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // r = x - qy    where  0 <= r < abs(y)\r\n      s = y.s;\r\n      y.s = 1;\r\n      q = div(x, y, 0, 3);\r\n      y.s = s;\r\n      q.s *= s;\r\n    } else {\r\n      q = div(x, y, 0, MODULO_MODE);\r\n    }\r\n\r\n    y = x.minus(q.times(y));\r\n\r\n    // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n    if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n   * of BigNumber(y, b).\r\n   */\r\n  P.multipliedBy = P.times = function (y, b) {\r\n    var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n      base, sqrtBase,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new BigNumber(y, b)).c;\r\n\r\n    // Either NaN, ±Infinity or ±0?\r\n    if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n      // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n      if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n        y.c = y.e = y.s = null;\r\n      } else {\r\n        y.s *= x.s;\r\n\r\n        // Return ±Infinity if either is ±Infinity.\r\n        if (!xc || !yc) {\r\n          y.c = y.e = null;\r\n\r\n        // Return ±0 if either is ±0.\r\n        } else {\r\n          y.c = [0];\r\n          y.e = 0;\r\n        }\r\n      }\r\n\r\n      return y;\r\n    }\r\n\r\n    e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n    y.s *= x.s;\r\n    xcL = xc.length;\r\n    ycL = yc.length;\r\n\r\n    // Ensure xc points to longer array and xcL to its length.\r\n    if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n    // Initialise the result array with zeros.\r\n    for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n    base = BASE;\r\n    sqrtBase = SQRT_BASE;\r\n\r\n    for (i = ycL; --i >= 0;) {\r\n      c = 0;\r\n      ylo = yc[i] % sqrtBase;\r\n      yhi = yc[i] / sqrtBase | 0;\r\n\r\n      for (k = xcL, j = i + k; j > i;) {\r\n        xlo = xc[--k] % sqrtBase;\r\n        xhi = xc[k] / sqrtBase | 0;\r\n        m = yhi * xlo + xhi * ylo;\r\n        xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n        c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n        zc[j--] = xlo % base;\r\n      }\r\n\r\n      zc[j] = c;\r\n    }\r\n\r\n    if (c) {\r\n      ++e;\r\n    } else {\r\n      zc.splice(0, 1);\r\n    }\r\n\r\n    return normalise(y, zc, e);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n   * i.e. multiplied by -1.\r\n   */\r\n  P.negated = function () {\r\n    var x = new BigNumber(this);\r\n    x.s = -x.s || null;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.plus = function (y, b) {\r\n    var t,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n     if (a != b) {\r\n      y.s = -b;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Return ±Infinity if either ±Infinity.\r\n      if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n      // Either zero?\r\n      // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n      if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n    if (a = xe - ye) {\r\n      if (a > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        a = -a;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; a--; t.push(0));\r\n      t.reverse();\r\n    }\r\n\r\n    a = xc.length;\r\n    b = yc.length;\r\n\r\n    // Point xc to the longer array, and b to the shorter length.\r\n    if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n    for (a = 0; b;) {\r\n      a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n      xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n    }\r\n\r\n    if (a) {\r\n      xc = [a].concat(xc);\r\n      ++ye;\r\n    }\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    // ye = MAX_EXP + 1 possible\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   * If sd is undefined or null or true or false, return the number of significant digits of\r\n   * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   * If sd is true include integer-part trailing zeros in the count.\r\n   *\r\n   * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n   *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.precision = P.sd = function (sd, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (sd != null && sd !== !!sd) {\r\n      intCheck(sd, 1, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), sd, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    v = c.length - 1;\r\n    n = v * LOG_BASE + 1;\r\n\r\n    if (v = c[v]) {\r\n\r\n      // Subtract the number of trailing zeros of the last element.\r\n      for (; v % 10 == 0; v /= 10, n--);\r\n\r\n      // Add the number of digits of the first element.\r\n      for (v = c[0]; v >= 10; v /= 10, n++);\r\n    }\r\n\r\n    if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n   * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n   *\r\n   * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n   */\r\n  P.shiftedBy = function (k) {\r\n    intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n    return this.times('1e' + k);\r\n  };\r\n\r\n\r\n  /*\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N) =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I) =  I\r\n   *  sqrt(0) =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n   * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, r, rep, t,\r\n      x = this,\r\n      c = x.c,\r\n      s = x.s,\r\n      e = x.e,\r\n      dp = DECIMAL_PLACES + 4,\r\n      half = new BigNumber('0.5');\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !c || !c[0]) {\r\n      return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n    }\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+valueOf(x));\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = coeffToString(c);\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(+n);\r\n      e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new BigNumber(n);\r\n    } else {\r\n      r = new BigNumber(s + '');\r\n    }\r\n\r\n    // Check for zero.\r\n    // r could be zero if MIN_EXP is changed after the this value was created.\r\n    // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n    // coeffToString to throw.\r\n    if (r.c[0]) {\r\n      e = r.e;\r\n      s = e + dp;\r\n      if (s < 3) s = 0;\r\n\r\n      // Newton-Raphson iteration.\r\n      for (; ;) {\r\n        t = r;\r\n        r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n        if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n          // The exponent of r may here be one less than the final result exponent,\r\n          // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n          // are indexed correctly.\r\n          if (r.e < e) --s;\r\n          n = n.slice(s - 3, s + 1);\r\n\r\n          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n          // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n          // iteration.\r\n          if (n == '9999' || !rep && n == '4999') {\r\n\r\n            // On the first iteration only, check to see if rounding up gives the\r\n            // exact result as the nines may infinitely repeat.\r\n            if (!rep) {\r\n              round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n              if (t.times(t).eq(x)) {\r\n                r = t;\r\n                break;\r\n              }\r\n            }\r\n\r\n            dp += 4;\r\n            s += 4;\r\n            rep = 1;\r\n          } else {\r\n\r\n            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n            // result. If not, then there are further digits and m will be truthy.\r\n            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n              // Truncate to the first rounding digit.\r\n              round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n              m = !r.times(r).eq(x);\r\n            }\r\n\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in exponential notation and\r\n   * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp++;\r\n    }\r\n    return format(this, dp, rm, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n   * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n   * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp = dp + this.e + 1;\r\n    }\r\n    return format(this, dp, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n   * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n   * of the format or FORMAT object (see BigNumber.set).\r\n   *\r\n   * The formatting object may contain some or all of the properties shown below.\r\n   *\r\n   * FORMAT = {\r\n   *   prefix: '',\r\n   *   groupSize: 3,\r\n   *   secondaryGroupSize: 0,\r\n   *   groupSeparator: ',',\r\n   *   decimalSeparator: '.',\r\n   *   fractionGroupSize: 0,\r\n   *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n   *   suffix: ''\r\n   * };\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   * [format] {object} Formatting options. See FORMAT pbject above.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   * '[BigNumber Error] Argument not an object: {format}'\r\n   */\r\n  P.toFormat = function (dp, rm, format) {\r\n    var str,\r\n      x = this;\r\n\r\n    if (format == null) {\r\n      if (dp != null && rm && typeof rm == 'object') {\r\n        format = rm;\r\n        rm = null;\r\n      } else if (dp && typeof dp == 'object') {\r\n        format = dp;\r\n        dp = rm = null;\r\n      } else {\r\n        format = FORMAT;\r\n      }\r\n    } else if (typeof format != 'object') {\r\n      throw Error\r\n        (bignumberError + 'Argument not an object: ' + format);\r\n    }\r\n\r\n    str = x.toFixed(dp, rm);\r\n\r\n    if (x.c) {\r\n      var i,\r\n        arr = str.split('.'),\r\n        g1 = +format.groupSize,\r\n        g2 = +format.secondaryGroupSize,\r\n        groupSeparator = format.groupSeparator || '',\r\n        intPart = arr[0],\r\n        fractionPart = arr[1],\r\n        isNeg = x.s < 0,\r\n        intDigits = isNeg ? intPart.slice(1) : intPart,\r\n        len = intDigits.length;\r\n\r\n      if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n      if (g1 > 0 && len > 0) {\r\n        i = len % g1 || g1;\r\n        intPart = intDigits.substr(0, i);\r\n        for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n        if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n        if (isNeg) intPart = '-' + intPart;\r\n      }\r\n\r\n      str = fractionPart\r\n       ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n        ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n         '$&' + (format.fractionGroupSeparator || ''))\r\n        : fractionPart)\r\n       : intPart;\r\n    }\r\n\r\n    return (format.prefix || '') + str + (format.suffix || '');\r\n  };\r\n\r\n\r\n  /*\r\n   * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n   * fraction with an integer numerator and an integer denominator.\r\n   * The denominator will be a positive non-zero value less than or equal to the specified\r\n   * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n   * the lowest value necessary to represent the number exactly.\r\n   *\r\n   * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n   *\r\n   * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n   */\r\n  P.toFraction = function (md) {\r\n    var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n      x = this,\r\n      xc = x.c;\r\n\r\n    if (md != null) {\r\n      n = new BigNumber(md);\r\n\r\n      // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n      if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n        throw Error\r\n          (bignumberError + 'Argument ' +\r\n            (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n      }\r\n    }\r\n\r\n    if (!xc) return new BigNumber(x);\r\n\r\n    d = new BigNumber(ONE);\r\n    n1 = d0 = new BigNumber(ONE);\r\n    d1 = n0 = new BigNumber(ONE);\r\n    s = coeffToString(xc);\r\n\r\n    // Determine initial denominator.\r\n    // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n    e = d.e = s.length - x.e - 1;\r\n    d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n    md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n    exp = MAX_EXP;\r\n    MAX_EXP = 1 / 0;\r\n    n = new BigNumber(s);\r\n\r\n    // n0 = d1 = 0\r\n    n0.c[0] = 0;\r\n\r\n    for (; ;)  {\r\n      q = div(n, d, 0, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.comparedTo(md) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      n1 = n0.plus(q.times(d2 = n1));\r\n      n0 = d2;\r\n      d = n.minus(q.times(d2 = d));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = div(md.minus(d0), d1, 0, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n    e = e * 2;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n    r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n        div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n    MAX_EXP = exp;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this BigNumber converted to a number primitive.\r\n   */\r\n  P.toNumber = function () {\r\n    return +valueOf(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n   * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n   * necessary to represent the integer part of the value in fixed-point notation, then use\r\n   * exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    if (sd != null) intCheck(sd, 1, MAX);\r\n    return format(this, sd, rm, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n   * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n   * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n   * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n   * TO_EXP_NEG, return exponential notation.\r\n   *\r\n   * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n   *\r\n   * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n   */\r\n  P.toString = function (b) {\r\n    var str,\r\n      n = this,\r\n      s = n.s,\r\n      e = n.e;\r\n\r\n    // Infinity or NaN?\r\n    if (e === null) {\r\n      if (s) {\r\n        str = 'Infinity';\r\n        if (s < 0) str = '-' + str;\r\n      } else {\r\n        str = 'NaN';\r\n      }\r\n    } else {\r\n      if (b == null) {\r\n        str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n         ? toExponential(coeffToString(n.c), e)\r\n         : toFixedPoint(coeffToString(n.c), e, '0');\r\n      } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n        n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n        str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n      } else {\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n        str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n      }\r\n\r\n      if (s < 0 && n.c[0]) str = '-' + str;\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return as toString, but do not accept a base argument, and include the minus sign for\r\n   * negative zero.\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    return valueOf(this);\r\n  };\r\n\r\n\r\n  P._isBigNumber = true;\r\n\r\n  P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n  // Node.js v10.12.0+\r\n  P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n\r\n  if (configObject != null) BigNumber.set(configObject);\r\n\r\n  return BigNumber;\r\n}\r\n\r\n\r\n// PRIVATE HELPER FUNCTIONS\r\n\r\n// These functions don't need access to variables,\r\n// e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\nfunction bitFloor(n) {\r\n  var i = n | 0;\r\n  return n > 0 || n === i ? i : i - 1;\r\n}\r\n\r\n\r\n// Return a coefficient array as a string of base 10 digits.\r\nfunction coeffToString(a) {\r\n  var s, z,\r\n    i = 1,\r\n    j = a.length,\r\n    r = a[0] + '';\r\n\r\n  for (; i < j;) {\r\n    s = a[i++] + '';\r\n    z = LOG_BASE - s.length;\r\n    for (; z--; s = '0' + s);\r\n    r += s;\r\n  }\r\n\r\n  // Determine trailing zeros.\r\n  for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n  return r.slice(0, j + 1 || 1);\r\n}\r\n\r\n\r\n// Compare the value of BigNumbers x and y.\r\nfunction compare(x, y) {\r\n  var a, b,\r\n    xc = x.c,\r\n    yc = y.c,\r\n    i = x.s,\r\n    j = y.s,\r\n    k = x.e,\r\n    l = y.e;\r\n\r\n  // Either NaN?\r\n  if (!i || !j) return null;\r\n\r\n  a = xc && !xc[0];\r\n  b = yc && !yc[0];\r\n\r\n  // Either zero?\r\n  if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n  // Signs differ?\r\n  if (i != j) return i;\r\n\r\n  a = i < 0;\r\n  b = k == l;\r\n\r\n  // Either Infinity?\r\n  if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n  // Compare exponents.\r\n  if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n  j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n  // Compare lengths.\r\n  return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n}\r\n\r\n\r\n/*\r\n * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n */\r\nfunction intCheck(n, min, max, name) {\r\n  if (n < min || n > max || n !== mathfloor(n)) {\r\n    throw Error\r\n     (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n       ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n       : ' not a primitive number: ') + String(n));\r\n  }\r\n}\r\n\r\n\r\n// Assumes finite n.\r\nfunction isOdd(n) {\r\n  var k = n.c.length - 1;\r\n  return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n}\r\n\r\n\r\nfunction toExponential(str, e) {\r\n  return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n   (e < 0 ? 'e' : 'e+') + e;\r\n}\r\n\r\n\r\nfunction toFixedPoint(str, e, z) {\r\n  var len, zs;\r\n\r\n  // Negative exponent?\r\n  if (e < 0) {\r\n\r\n    // Prepend zeros.\r\n    for (zs = z + '.'; ++e; zs += z);\r\n    str = zs + str;\r\n\r\n  // Positive exponent\r\n  } else {\r\n    len = str.length;\r\n\r\n    // Append zeros.\r\n    if (++e > len) {\r\n      for (zs = z, e -= len; --e; zs += z);\r\n      str += zs;\r\n    } else if (e < len) {\r\n      str = str.slice(0, e) + '.' + str.slice(e);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// EXPORT\r\n\r\n\r\nexport var BigNumber = clone();\r\n\r\nexport default BigNumber;\r\n","import { render } from \"./moudle3.vue?vue&type=template&id=25024662\"\nimport script from \"./moudle3.vue?vue&type=script&lang=js\"\nexport * from \"./moudle3.vue?vue&type=script&lang=js\"\n\nimport \"./moudle3.vue?vue&type=style&index=0&id=25024662&lang=css\"\n\nimport exportComponent from \"C:\\\\code\\\\captain\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./index.vue?vue&type=template&id=78387bc4\"\nimport script from \"./index.vue?vue&type=script&lang=js\"\nexport * from \"./index.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"C:\\\\code\\\\captain\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["isCallable","$String","String","$TypeError","TypeError","module","exports","argument","ArrayBuffer","DataView","NAME","Constructor","Prototype","NATIVE_ARRAY_BUFFER","DESCRIPTORS","global","isObject","hasOwn","classof","tryToString","createNonEnumerableProperty","defineBuiltIn","defineBuiltInAccessor","isPrototypeOf","getPrototypeOf","setPrototypeOf","wellKnownSymbol","uid","InternalStateModule","enforceInternalState","enforce","getInternalState","get","Int8Array","Int8ArrayPrototype","prototype","Uint8ClampedArray","Uint8ClampedArrayPrototype","TypedArray","TypedArrayPrototype","ObjectPrototype","Object","TO_STRING_TAG","TYPED_ARRAY_TAG","TYPED_ARRAY_CONSTRUCTOR","NATIVE_ARRAY_BUFFER_VIEWS","opera","TYPED_ARRAY_TAG_REQUIRED","TypedArrayConstructorsList","Uint8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","BigIntArrayConstructorsList","BigInt64Array","BigUint64Array","isView","it","klass","getTypedArrayConstructor","proto","state","isTypedArray","aTypedArray","aTypedArrayConstructor","C","exportTypedArrayMethod","KEY","property","forced","options","ARRAY","TypedArrayConstructor","error","error2","exportTypedArrayStaticMethod","Function","configurable","this","undefined","lengthOfArrayLike","list","index","length","result","O","len","A","k","toIntegerOrInfinity","$RangeError","RangeError","value","relativeIndex","actualIndex","TO_STRING_TAG_SUPPORT","classofRaw","$Object","CORRECT_ARGUMENTS","arguments","tryGet","key","tag","callee","fails","F","constructor","makeBuiltIn","defineProperty","target","name","descriptor","getter","set","setter","f","uncurryThis","aCallable","object","method","getOwnPropertyDescriptor","toObject","sharedKey","CORRECT_PROTOTYPE_GETTER","IE_PROTO","uncurryThisAccessor","anObject","aPossiblePrototype","CORRECT_SETTER","test","Array","__proto__","toPrimitive","prim","BigInt","arrayToReversed","ArrayBufferViewCore","arrayFromConstructorAndList","sort","compareFn","arrayWith","isBigIntArray","toBigInt","PROPER_ORDER","valueOf","actualValue","_createBlock","_component_MoudlePage3","class","style","_component_v_card","_createVNode","_component_v_card_text","_createElementVNode","_hoisted_1","_component_v_icon","_component_a_input_number","_ctx","money","$event","onChange","changeMoney","min","max","_component_a_tag","color","icon","_withCtx","_hoisted_2","_toDisplayString","rate","_hoisted_3","_component_a_table","columns","data","pagination","size","headerCell","column","_createElementBlock","_Fragment","title","_hoisted_4","_hoisted_5","bodyCell","record","_hoisted_6","type","valuePriceStart","precision","_precision","valuePriceOver","_component_v_btn","onClick","val","valueChange","density","direction","isNumeric","mathceil","Math","ceil","mathfloor","floor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","clone","configObject","div","convertBase","parseNumeric","P","BigNumber","toString","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","alphabetHasNormalDecimalDigits","v","b","alphabet","c","caseChanged","e","i","isNum","str","x","_isBigNumber","s","slice","charCodeAt","indexOf","replace","search","substring","intCheck","round","DEBUG","Error","charAt","toUpperCase","toLowerCase","push","format","n","rm","id","c0","ne","coeffToString","toExponential","toFixedPoint","maxOrMin","args","m","call","normalise","j","pop","sd","r","d","ni","rd","xc","pows10","out","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","obj","p","hasOwnProperty","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","lt","minimum","gt","random","pow2_53","random53bitInt","dp","a","rand","copy","splice","sum","plus","decimal","toBaseOut","baseIn","baseOut","arrL","arr","reverse","sign","callerIsToString","y","pow","concat","multiply","base","temp","xlo","xhi","carry","klo","khi","compare","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","yc","NaN","bitFloor","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","isNaN","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","isOdd","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","t","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","Symbol","toStringTag","for","z","l","zs","defineComponent","_this","dataIndex","width","remark","created","_value","localStorage","getItem","methods","includes","_count","_profit","number","profit","count","setItem","__exports__","components","MoudlePage3","render"],"sourceRoot":""}